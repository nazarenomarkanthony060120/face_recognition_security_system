import { View, Text, TextInput, TouchableOpacity, Alert } from 'react-native'
import React, { useState, useEffect } from 'react'
import { useRouter } from 'expo-router'
import { SafeAreaView } from 'react-native-safe-area-context'
import { MaterialIcons } from '@expo/vector-icons'
import { getUserRoutes } from '@/features/common/part/getUserRoutes'
import { UserType } from '@/utils/types'

interface LoginAuthenticationProps {
  params: URLSearchParams
}

const LoginAuthentication = ({ params }: LoginAuthenticationProps) => {
  const [otp, setOtp] = useState('')
  const [timer, setTimer] = useState(60)
  const [canResend, setCanResend] = useState(false)
  const router = useRouter()
  const phoneNumber = params.get('phoneNumber')
  const type = params.get('type') as UserType

  useEffect(() => {
    // Start the timer when component mounts
    const interval = setInterval(() => {
      setTimer((prevTimer) => {
        if (prevTimer <= 1) {
          clearInterval(interval)
          setCanResend(true)
          return 0
        }
        return prevTimer - 1
      })
    }, 1000)

    // Send OTP when component mounts
    sendOTP()

    return () => clearInterval(interval)
  }, [])

  const sendOTP = async () => {
    try {
      // TODO: Implement your SMS sending logic here
      // This is where you would integrate with your SMS service provider
      console.log(`Sending OTP to ${phoneNumber}`)
      Alert.alert('Success', 'OTP has been sent to your phone number')
    } catch (error) {
      Alert.alert('Error', 'Failed to send OTP. Please try again.')
    }
  }

  const handleResendOTP = () => {
    if (canResend) {
      setTimer(60)
      setCanResend(false)
      sendOTP()
    }
  }

  const handleVerifyOTP = async () => {
    if (otp.length !== 6) {
      Alert.alert('Error', 'Please enter a valid 6-digit OTP')
      return
    }

    try {
      // TODO: Implement your OTP verification logic here
      // This is where you would verify the OTP with your backend
      console.log('Verifying OTP:', otp)

      // If verification is successful, navigate to the appropriate screen based on user type
      const route = getUserRoutes(type)
      router.push(route)
    } catch (error) {
      Alert.alert('Error', 'Invalid OTP. Please try again.')
    }
  }

  return (
    <SafeAreaView className="flex-1 bg-white">
      <View className="flex-1 p-4">
        <View className="items-center mb-8">
          <MaterialIcons name="verified-user" size={80} color="#00bdcf" />
          <Text className="text-2xl font-bold mt-4">Verify Your Phone</Text>
          <Text className="text-gray-600 mt-2">
            Enter the 6-digit code sent to {phoneNumber}
          </Text>
        </View>

        <View className="mb-6">
          <TextInput
            className="border border-gray-300 rounded-lg p-4 text-center text-xl"
            placeholder="Enter OTP"
            keyboardType="number-pad"
            maxLength={6}
            value={otp}
            onChangeText={setOtp}
          />
        </View>

        <TouchableOpacity
          className="bg-[#00bdcf] p-4 rounded-lg mb-4"
          onPress={handleVerifyOTP}
        >
          <Text className="text-white text-center font-bold text-lg">
            Verify OTP
          </Text>
        </TouchableOpacity>

        <View className="items-center">
          {timer > 0 ? (
            <Text className="text-gray-600">
              Resend code in {timer} seconds
            </Text>
          ) : (
            <TouchableOpacity onPress={handleResendOTP}>
              <Text className="text-[#00bdcf] font-bold">Resend OTP</Text>
            </TouchableOpacity>
          )}
        </View>
      </View>
    </SafeAreaView>
  )
}

export default LoginAuthentication
